name: Pull Request Comment Direct

branding:
  icon: message-square
  color: blue

description: >
  Simple PR comment delete/(un)minimize/post/upsert action with persistent key
  based comment tracking across multiple runs. 

inputs:
  author:
    default: ''
    description: (Optional) specify author name to match existing comment(s).
    required: false
    type: string
  classifier:
    default: resolved
    description: Override default classifier on `minimize` operation.
    required: false
    type: string
  comment:
    default: ''
    description: Body of comment, used with `post` or `upsert` operation.
    required: false
    type: string
  error-on-missing-pr:
    default: 'true'
    description: Override with 'false' to suppress errors when the PR cannot be determined.
    required: false
    type: string
  key:
    default: ''
    description: (Optional) Unique & hidden key used to match comment(s) across operations.
    required: false
    type: string
  key-regex:
    default: ''
    description: (Optional) Key regex used when matching existing comments. When not specified, `key` is used instead.
    required: false
    type: string
  match:
    default: last
    description: Mode to operate on exiting comments, can be `all`, `allbutlast`, `first`, or `last`.
    required: false
    type: string
  operation:
    default: upsert
    description: Operation to execute - can be one of `delete`, `get`, `list-keys`, `minimize`, `post`, `unminimize`, `upsert` (default).
    required: false
    type: string
  pull-request:
    default:
    description: Override pull request number (default is auto-determined based on event or API query).
    required: false
    type: string
  quiet:
    default: false
    description: Do not output warnings when attempting operations on non-matching comments.
    required: false
    type: string
  regex:
    default: ''
    description: (Optional) Regular expression to test body of existing comment(s) for `delete`, `get`, or `upsert` operations.
    required: false
    type: string
  regex-flags:
    default: ''
    description: (Optional) Regex flags used along with regex argument; see jq regex documention for details.
    required: false
    type: string
  repository:
    default: ${{ github.repository }}
    description: Override repository name (default is repo the action is run in) - use `owner/repo` format.
    required: false
    type: string
  token:
    default: ${{ github.token }}
    description: Override default GitHub token.
    required: false
    type: string
outputs:
  keys:
    description: JSON list of keys found on a `list-keys` operation.
    value: ${{ steps.operation.outputs.keys }}
  json-output:
    description: JSON output of last API operation.
    value: ${{ steps.operation.outputs.json-output }}
  pull-request:
    description: Pull Request number as discovered or passed in.
    value: ${{ steps.operation.outputs.pull-request }}

runs:
  using: composite
  steps:
    - env:
        CLASSIFIER: ${{ inputs.classifier }}
        COMMENT: ${{ inputs.comment }}
        COMMENT_KEY: ${{ inputs.key }}
        ERROR_ON_MISSING_PR: ${{ inputs.error-on-missing-pr }}
        GITHUB_TOKEN: ${{ inputs.token }}
        OPERATION: ${{ inputs.operation }}
        PULL_REQUEST: ${{ inputs.pull-request }}
        QUIET: ${{ inputs.quiet }}
        REPOSITORY: ${{ inputs.repository }}
        SHA: ${{ github.sha }}
      id: operation
      if: ${{ inputs.operation != 'post' }}
      run: |
        # direct-actions/pr-comment ${{ inputs.operation }}
        if [ "$ACTIONS_RUNNER_DEBUG" == 'true' ] ; then
          set -x
        fi

        ALL_COMMENTS=$(mktemp)
        CLASSIFIER="$(tr '[a-z]' '[A-Z]' <<< "$CLASSIFIER")"
        COMMENT='<!--direct-actions/pr-comment:key:'"${COMMENT_KEY}-->"$'\n'"${COMMENT}"
        COMMENTS=$(mktemp)
        ERROR=$(mktemp)

        gh_api() {
          local url query
          local operation=$1
          local method=$2
          local body=$4
          local output=$5
          if [ -z "$output" ] ; then
            output=$(mktemp)
          fi
          local failed=false

          if [ "$method" == 'graphql' ] ; then
            query="$3"
            gh api graphql -f query="${query}" >"${output}" 2>"${ERROR}" || failed=true
          else 
            url="$3"
            gh api \
              --method "$method" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "$url" \
              -f body="${body}" \
              >"$output" 2>"$ERROR" || failed=true
          fi

          if [ "$QUIET" != 'true' ] ; then
            if [ -n "$query" ] ; then
              echo -e "::group::operation=${operation} query\n${query}\n::endgroup::"
            fi
            echo "::group::operation=${operation} method=${method} ${url+url=}${url}"
            jq -C . "$output"
            echo "::endgroup::"
          fi

          if $failed ; then
            echo "::error title=direct-actions/pr-comment - API error::" \
              "::Operation (${operation}) method ${method} ${url+url=}${url} failed -" \
              "\"$(cat "$ERROR")\"."
            exit 1
          fi

          jq -r '"json-output<<_EOF_\n\(@json)\n_EOF_\n"' "$output" >> "$GITHUB_OUTPUT"
        }

        PULL_REQUEST=${PULL_REQUEST:-${{ github.event.number }}}
        if [ -z "$PULL_REQUEST" ] ; then
          API_OUTPUT=$(mktemp)
          gh_api 'get-pr-associated-with-commit' GET "/repos/${REPOSITORY}/commits/${SHA}/pulls?per_page=100" '' "$API_OUTPUT"
          PULL_REQUEST=$(jq first.number "$API_OUTPUT")
          if [ -z "$PULL_REQUEST" ] ; then
            if [ "$QUIET" = 'true' ] || [ "$ERROR_ON_MISSING_PR" != 'true' ] ; then
              echo 'Cannot determine Pull Request number, exiting.'
            else
              echo "::error title=direct-actions/pr-comment - Cannot determine" \
                "pull request::Cannot determine Pull Request number in this" \
                "sitation, consider passing explicitly via pull-request input," \
                "or set `error-on-missing-pr: false` to suppress this error."
            fi
            if [ "$ERROR_ON_MISSING_PR" == 'true' ] ; then
              exit 1
            else
              exit 0
            fi
          fi
          echo "pull-request=${PULL_REQUEST}" >>"${GITHUB_OUTPUT}"
        fi

        if [ -z "$REPOSITORY" ] ; then
          echo "::error title=direct-actions/pr-comment - Cannot determine" \
            "repository::Cannot determine repository in this situation, pass" \
            "explicitly via repository input."
          exit 1
        else
          gh_api 'get-existing-comments' GET "/repos/${REPOSITORY}/issues/${PULL_REQUEST}/comments?per_page=100" '' "$ALL_COMMENTS"
        fi

        if [ "$ACTIONS_RUNNER_DEBUG" == 'true' ] ; then echo ::group::all_comments.json
          jq -C . "$ALL_COMMENTS"
          echo ::endgroup::
        fi

        jq \
          --arg author '${{ inputs.author }}' \
          --arg key '${{ inputs.key }}' \
          --arg key_regex '${{ inputs.key-regex }}' \
          --arg match '${{ inputs.match }}' \
          --arg regex '${{ inputs.regex }}' \
          --arg regex_flags '${{ inputs.regex-flags }}' \
          -r '
            map(
              if $ARGS.named.author? != "" then
                select(.author.login == $ARGS.named.author)
              else
                .
              end |
              if $ARGS.named.key_regex != "" then
                select(
                  .body |
                  capture("<!--direct-actions/pr-comment:key:(?<key>[^>]*)-->") |
                  .key |
                  test($ARGS.named.key_regex)
                )
              elif $ARGS.named.key? != "" then
                select(
                  .body |
                  startswith("<!--direct-actions/pr-comment:key:\($ARGS.named.key)-->")
                )
              else
                .
              end |
              if $ARGS.named.regex? != "" then
                select(.body | test($ARGS.named.regex ; $ARGS.named.regex_flags))
              else
              .
              end
            ) |
            if length == 0 then
              []
            elif $ARGS.named.match? == "all" then
              .
            elif $ARGS.named.match? == "allbutlast" then
              .[0:-1]
            elif $ARGS.named.match? == "first" then
              [first]
            elif $ARGS.named.match? == "last" then
              [last]
            else
              error("Unknown value for argument \"match\": \($ARGS.named.match)")
            end
          ' "$ALL_COMMENTS" > \
          "$COMMENTS"
        NUM_COMMENTS=$(jq -r length "$COMMENTS")

        if [ "$ACTIONS_RUNNER_DEBUG" == 'true' ] ; then
          echo "::group::Matching comments (${NUM_COMMENTS})::"
          jq -C . "$COMMENTS"
          echo '::endgroup::'
        fi

        if [ "$OPERATION" == 'post' ] || [[ "$OPERATION" == 'upsert' && "$NUM_COMMENTS" -eq 0 ]]; then
          gh_api "$OPERATION" POST "/repos/${REPOSITORY}/issues/${PULL_REQUEST}/comments" "$COMMENT"
        elif [ "$OPERATION" == 'list-keys' ] ; then
          jq '
            map(
              .body |
              scan("^<!--direct-actions/pr-comment:key:([^>]*)-->")
            ) |
            flatten |
            unique |
            "keys=\(@json)"
          ' \
          "$ALL_COMMENTS" | \
          tee -a "$GITHUB_OUTPUT"
        elif [[ "$OPERATION" =~ ^(delete|get|minimize|unminimize|upsert)$ ]] ; then
          if [ "$NUM_COMMENTS" -eq 0 ] && [ "$QUIET" != 'true' ] ; then
            echo "::warning title=direct-actions/pr-comment - Cannot perform" \
              "operation::Attempting operation ${OPERATION} but cannot find" \
              "matching comment(s)."
          else
            for (( x=0 ; x < NUM_COMMENTS ; x++ )) ; do 
              case "$OPERATION" in
                delete)
                  ID=$(jq --arg index "$x" -r '.[$index | tonumber].id' "$COMMENTS")
                  gh_api "$OPERATION" DELETE "/repos/${REPOSITORY}/issues/comments/${ID}" "$COMMENT"
                  ;;
                get)
                  ID=$(jq --arg index "$x" -r '.[$index | tonumber].id' "$COMMENTS")
                  gh_api "$OPERATION" GET "repos/${REPOSITORY}/issues/comments/${ID}?per_page=100" "$COMMENT"
                  ;;
                minimize)
                  NODE_ID=$(jq --arg index "$x" -r '.[$index | tonumber].node_id' "$COMMENTS")
                  gh_api "$OPERATION" graphql "\
                    mutation {
                      minimizeComment(input: { subjectId: \"${NODE_ID}\", classifier: ${CLASSIFIER} }) {
                        clientMutationId
                      }
                    }"
                  ;;
                unminimize)
                  NODE_ID=$(jq --arg index "$x" -r '.[$index | tonumber].node_id' "$COMMENTS")
                  gh_api "$OPERATION" graphql "\
                    mutation {
                      unminimizeComment(input: { subjectId: \"${NODE_ID}\" }) {
                        clientMutationId
                      }
                    }"
                  ;;
                upsert)
                  ID=$(jq --arg index "$x" -r '.[$index | tonumber].id' "$COMMENTS")
                  gh_api "$OPERATION" PATCH "/repos/${REPOSITORY}/issues/comments/${ID}" "$COMMENT"
                  ;;
              esac
            done
          fi
        else
          echo "::warning title=direct-actions/pr-comment - Invalid" \
            "operation::Invalid operation (${OPERATION}) specified."
          exit 1
        fi
      shell: bash
